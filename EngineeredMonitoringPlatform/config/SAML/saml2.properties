#  If 'strict' is True, then the Java Toolkit will reject unsigned
#  or unencrypted messages if it expects them signed or encrypted
#  Also will reject the messages if not strictly follow the SAML
onelogin.saml2.strict =  false

# Enable debug mode (to print errors)
onelogin.saml2.debug =  true

#################################################
## Service Provider Data that we are deploying ##
#################################################

#  Identifier of the SP entity  (must be a URI)
onelogin.saml2.sp.entityid = http://localhost:8888/cfw/saml2/acs/metadata

# Specifies info about where and how the <AuthnResponse> message MUST be
# returned to the requester, in this case our SP.
# URL Location where the <Response> from the IdP will be returned
onelogin.saml2.sp.assertion_consumer_service.url = http://localhost:8888/cfw/saml2/acs

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-POST binding only
onelogin.saml2.sp.assertion_consumer_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST

# Specifies info about where and how the <Logout Response> message MUST be
# returned to the requester, in this case our SP.
onelogin.saml2.sp.single_logout_service.url = http://localhost:8080/java-saml-tookit-jspsample/sls.jsp

# SAML protocol binding to be used when returning the <LogoutResponse> or sending the <LogoutRequest>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.sp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Specifies constraints on the name identifier to be used to
# represent the requested subject.
# Take a look on core/src/main/java/com/onelogin/saml2/util/Constants.java to see the NameIdFormat supported
onelogin.saml2.sp.nameidformat = urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified

# Usually x509cert and privateKey of the SP are provided by files placed at
# the certs folder. But we can also provide them with the following parameters

onelogin.saml2.sp.x509cert = MIICdjCCAd+gAwIBAgIBADANBgkqhkiG9w0BAQ0FADBXMQswCQYDVQQGEwJjaDEPMA0GA1UECAwGWnVyaWNoMRkwFwYDVQQKDBBBY21lIFNhbXBsZSBJbmMuMRwwGgYDVQQDDBNhY21lLXNhbXBsZS1pbmMuY29tMCAXDTIwMDkxMTA3MTIwM1oYDzIxMjAwODE4MDcxMjAzWjBXMQswCQYDVQQGEwJjaDEPMA0GA1UECAwGWnVyaWNoMRkwFwYDVQQKDBBBY21lIFNhbXBsZSBJbmMuMRwwGgYDVQQDDBNhY21lLXNhbXBsZS1pbmMuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCuAY1hWgpWazUWMmZEkeh/TbTchJgw5SSsu7i0qOhtyXpzaLLZCVxmQtak17IfhDImrEpJFkrchzfuLCiwuAnZQFlDrA95R2y7tnZCzS1iAXVdK4s+cn/x0kPJ9af9V99raZqp98KSxDFR89av1rteotEy2xIvajCcBthuSHAPJQIDAQABo1AwTjAdBgNVHQ4EFgQUj1vndJ3V3nhftb/XIwG0hjZdh28wHwYDVR0jBBgwFoAUj1vndJ3V3nhftb/XIwG0hjZdh28wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQ0FAAOBgQBfd/ibXNKjTCkBhyele9s987FZtaZoHiKsDFvN0DJqiHDv7j1mcaA08Ag4Hqrgn155JL5eF+hr5OWSNtcOlbVjeBrcOCXKIdaJrSqE4vYWUmP9JtPeniA5IWGVj0mKAsKl34ksJaDuB41fAuKokcwsotQUaWTT0MGF0GcoDara3w==

# Future SP certificate, to be used during SP Key roll over
onelogin.saml2.sp.x509certNew = MIICdjCCAd+gAwIBAgIBADANBgkqhkiG9w0BAQ0FADBXMQswCQYDVQQGEwJjaDEPMA0GA1UECAwGWnVyaWNoMRkwFwYDVQQKDBBBY21lIFNhbXBsZSBJbmMuMRwwGgYDVQQDDBNhY21lLXNhbXBsZS1pbmMuY29tMCAXDTIwMDkxMTA3MTIwM1oYDzIxMjAwODE4MDcxMjAzWjBXMQswCQYDVQQGEwJjaDEPMA0GA1UECAwGWnVyaWNoMRkwFwYDVQQKDBBBY21lIFNhbXBsZSBJbmMuMRwwGgYDVQQDDBNhY21lLXNhbXBsZS1pbmMuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCuAY1hWgpWazUWMmZEkeh/TbTchJgw5SSsu7i0qOhtyXpzaLLZCVxmQtak17IfhDImrEpJFkrchzfuLCiwuAnZQFlDrA95R2y7tnZCzS1iAXVdK4s+cn/x0kPJ9af9V99raZqp98KSxDFR89av1rteotEy2xIvajCcBthuSHAPJQIDAQABo1AwTjAdBgNVHQ4EFgQUj1vndJ3V3nhftb/XIwG0hjZdh28wHwYDVR0jBBgwFoAUj1vndJ3V3nhftb/XIwG0hjZdh28wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQ0FAAOBgQBfd/ibXNKjTCkBhyele9s987FZtaZoHiKsDFvN0DJqiHDv7j1mcaA08Ag4Hqrgn155JL5eF+hr5OWSNtcOlbVjeBrcOCXKIdaJrSqE4vYWUmP9JtPeniA5IWGVj0mKAsKl34ksJaDuB41fAuKokcwsotQUaWTT0MGF0GcoDara3w==

# Requires Format PKCS#8   BEGIN PRIVATE KEY       
# If you have     PKCS#1   BEGIN RSA PRIVATE KEY  convert it by   openssl pkcs8 -topk8 -inform pem -nocrypt -in sp.rsa_key -outform pem -out sp.pem
onelogin.saml2.sp.privatekey = MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAK4BjWFaClZrNRYyZkSR6H9NtNyEmDDlJKy7uLSo6G3JenNostkJXGZC1qTXsh+EMiasSkkWStyHN+4sKLC4CdlAWUOsD3lHbLu2dkLNLWIBdV0riz5yf/HSQ8n1p/1X32tpmqn3wpLEMVHz1q/Wu16i0TLbEi9qMJwG2G5IcA8lAgMBAAECgYEAiXISch6EYeTHBySCYZF7O+tufG2EJcMqaALUEGgHSIlIXxcJhqR9Rw1urMDwIzLxxlh7SSYBthZdGJXrAkQtCg8As9qK5laUon2oEMAM7H6soaOsfQxt82Elnf1Bbmt3QOORotRRQc6yDZ4CCeo/dx146z46iDP42pvhQ1osFfUCQQDj2jDMogAjwxnotx/NHmLtBrlDEhxulZWRYTs9wQX1nFJL4bmEt3ZB/EifaMAvqmT/p4vblXoI5SZTIRf7ZRZHAkEAw4B6l8mHg0JUptHm4WPMr1YLyoi6AKgUj9h38jlnr4m4IYrgmubNhgfQz3axzRadqUZcX6iC4v+EktsPcsrpMwJBAKkZf2n/ONdRrmLVtVZHnOeIO+oZANzZSv1wCcVVAZU8hJ8oUMS8W5mxIDyeQzOc5AQQVm2Ky9zaI81CHEhIx3UCQDw2oQuJBZTW5C2xLpQy4cMLFHyf2fID0rlvKZpQNfAp0a17EayD878ZPyX239JT6eFOC3tm8lEp89IraDmp52MCQHtEzPzSE5H2e7kK/teqkOhHfitERm0QMwFfgaoWWHFkSCdrALBl9o7dylxE8CUqKGH0CoY6dsM81j4LuS1F8rs=

#############################################################
## Identity Provider Data that we want connect with our SP ##
#############################################################

# Identifier of the IdP entity  (must be a URI)
onelogin.saml2.idp.entityid = https://capriza.github.io/samling/public/metadata.xml

# SSO endpoint info of the IdP. (Authentication Request protocol)
# URL Target of the IdP where the SP will send the Authentication Request Message
# Example: onelogin.saml2.idp.single_sign_on_service.url = http://localhost:8080/java-saml-tookit-jspsample/acs.jsp
onelogin.saml2.idp.single_sign_on_service.url = https://capriza.github.io/samling/samling.html

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_sign_on_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# SLO endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Request
onelogin.saml2.idp.single_logout_service.url = https://capriza.github.io/samling/samling.html

# Optional SLO Response endpoint info of the IdP.
# URL Location of the IdP where the SP will send the SLO Response. If left blank, same URL as onelogin.saml2.idp.single_logout_service.url will be used.
# Some IdPs use a separate URL for sending a logout request and response, use this property to set the separate response url
onelogin.saml2.idp.single_logout_service.response.url =

# SAML protocol binding to be used when returning the <Response>
# message.  Onelogin Toolkit supports for this endpoint the
# HTTP-Redirect binding only
onelogin.saml2.idp.single_logout_service.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect

# Public x509 certificate of the IdP
onelogin.saml2.idp.x509cert = MIICpzCCAhACCQDuFX0Db5iljDANBgkqhkiG9w0BAQsFADCBlzELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExEjAQBgNVBAcMCVBhbG8gQWx0bzEQMA4GA1UECgwHU2FtbGluZzEPMA0GA1UECwwGU2FsaW5nMRQwEgYDVQQDDAtjYXByaXphLmNvbTEmMCQGCSqGSIb3DQEJARYXZW5naW5lZXJpbmdAY2Fwcml6YS5jb20wHhcNMTgwNTE1MTgxMTEwWhcNMjgwNTEyMTgxMTEwWjCBlzELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExEjAQBgNVBAcMCVBhbG8gQWx0bzEQMA4GA1UECgwHU2FtbGluZzEPMA0GA1UECwwGU2FsaW5nMRQwEgYDVQQDDAtjYXByaXphLmNvbTEmMCQGCSqGSIb3DQEJARYXZW5naW5lZXJpbmdAY2Fwcml6YS5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAJEBNDJKH5nXr0hZKcSNIY1l4HeYLPBEKJLXyAnoFTdgGrvi40YyIx9lHh0LbDVWCgxJp21BmKll0CkgmeKidvGlr3FUwtETro44L+SgmjiJNbftvFxhNkgA26O2GDQuBoQwgSiagVadWXwJKkodH8tx4ojBPYK1pBO8fHf3wOnxAgMBAAEwDQYJKoZIhvcNAQELBQADgYEACIylhvh6T758hcZjAQJiV7rMRg+Omb68iJI4L9f0cyBcJENR+1LQNgUGyFDMm9Wm9o81CuIKBnfpEE2Jfcs76YVWRJy5xJ11GFKJJ5T0NEB7txbUQPoJOeNoE736lF5vYw6YKp8fJqPW0L2PLWe9qTn8hxpdnjo3k6r5gXyl8tk=

# Instead of using the whole x509cert you can use a fingerprint in order to
# validate a SAMLResponse (but you still need the x509cert to validate LogoutRequest and LogoutResponse using the HTTP-Redirect binding).
# But take in mind that the fingerprint, is a hash, so at the end is open to a collision attack that can end on a signature validation bypass,
# that why we don't recommend it use for production environments.
# (openssl x509 -noout -fingerprint -in "idp.crt" to generate it,
# or add for example the -sha256 , -sha384 or -sha512 parameter)
#
# If a fingerprint is provided, then the certFingerprintAlgorithm is required in order to
# let the toolkit know which Algorithm was used. Possible values: sha1, sha256, sha384 or sha512
# 'sha1' is the default value.
# onelogin.saml2.idp.certfingerprint = 
# onelogin.saml2.idp.certfingerprint_algorithm = sha1

# Security settings
#

# Indicates that the nameID of the <samlp:logoutRequest> sent by this SP
# will be encrypted.
onelogin.saml2.security.nameid_encrypted = false

# Indicates whether the <samlp:AuthnRequest> messages sent by this SP
# will be signed.              [The Metadata of the SP will offer this info]
onelogin.saml2.security.authnrequest_signed = false

# Indicates whether the <samlp:logoutRequest> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutrequest_signed = false

# Indicates whether the <samlp:logoutResponse> messages sent by this SP
# will be signed.
onelogin.saml2.security.logoutresponse_signed = false

# Indicates a requirement for the <samlp:Response>, <samlp:LogoutRequest> and
# <samlp:LogoutResponse> elements received by this SP to be signed.
onelogin.saml2.security.want_messages_signed = false

# Indicates a requirement for the <saml:Assertion> elements received by this SP to be signed.
onelogin.saml2.security.want_assertions_signed = false

# Indicates a requirement for the Metadata of this SP to be signed.
# Right now supported null (in order to not sign) or true (sign using SP private key) 
onelogin.saml2.security.sign_metadata =

# Indicates a requirement for the Assertions received by this SP to be encrypted
onelogin.saml2.security.want_assertions_encrypted = false

# Indicates a requirement for the NameID received by this SP to be encrypted
onelogin.saml2.security.want_nameid_encrypted = false


# Authentication context.
# Set Empty and no AuthContext will be sent in the AuthNRequest,
# Set comma separated values urn:oasis:names:tc:SAML:2.0:ac:classes:urn:oasis:names:tc:SAML:2.0:ac:classes:Password
onelogin.saml2.security.requested_authncontext = urn:oasis:names:tc:SAML:2.0:ac:classes:urn:oasis:names:tc:SAML:2.0:ac:classes:Password

# Allows the authn comparison parameter to be set, defaults to 'exact'
onelogin.saml2.security.requested_authncontextcomparison = exact

# Indicates if the SP will validate all received xmls.
# (In order to validate the xml, 'strict' and 'wantXMLValidation' must be true).
onelogin.saml2.security.want_xml_validation = true

# Algorithm that the toolkit will use on signing process. Options:
#  'http://www.w3.org/2000/09/xmldsig#rsa-sha1'
#  'http://www.w3.org/2000/09/xmldsig#dsa-sha1'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384'
#  'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512'
onelogin.saml2.security.signature_algorithm = http://www.w3.org/2000/09/xmldsig#rsa-sha1

# Organization
onelogin.saml2.organization.name = SP Java 
onelogin.saml2.organization.displayname = SP Java Example
onelogin.saml2.organization.url = http://sp.example.com
onelogin.saml2.organization.lang = en

# Contacts
onelogin.saml2.contacts.technical.given_name = Technical Guy
onelogin.saml2.contacts.technical.email_address = technical@example.com
onelogin.saml2.contacts.support.given_name = Support Guy
onelogin.saml2.contacts.support.email_address = support@example.com

# Prefix used in generated Unique IDs.
# Optional, defaults to ONELOGIN_ or full ID is like ONELOGIN_ebb0badd-4f60-4b38-b20a-a8e01f0592b1.
# At minimun, the prefix can be non-numeric character such as "_".
# onelogin.saml2.unique_id_prefix = _