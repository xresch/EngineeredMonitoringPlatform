####################################################################
# Influx 1.8 Error Response
####################################################################
{"results":[{"statement_id":0,"error":"undefined function avg()"}]}


####################################################################
# Influx 1.8 Request 
####################################################################

curl --get "http://localhost:8086/query" \
  --user "OneDotXUsername":"yourPasswordOrToken" \
  --data-urlencode "db=_internal" \
  --data-urlencode "q=SELECT * FROM runtime limit 10"
  
================================
Response sample
================================  
{
	"results": [
		{
			"statement_id": 0,
			"series": [
				{
					"name": "runtime",
					"columns": [
						"time",
						"Alloc",
						"Frees",
						"HeapAlloc",
						"HeapIdle",
						"HeapInUse",
						"HeapObjects",
						"HeapReleased",
						"HeapSys",
						"Lookups",
						"Mallocs",
						"NumGC",
						"NumGoroutine",
						"PauseTotalNs",
						"Sys",
						"TotalAlloc",
						"hostname"
					],
					"values": [
						[
							"2021-11-10T13:28:10Z",
							2962944,
							260309,
							2962944,
							61218816,
							5005312,
							26039,
							61054976,
							66224128,
							0,
							286348,
							6,
							20,
							215900,
							72617361,
							13886496,
							"f7daddb0728c"
						],
						[...]
					]
				}
			]
		}
	]
}

####################################################################
# Influx 1.8 FilterBy Time
####################################################################
WHERE time >= '2019-08-09T00:00:00Z' and time < '2019-08-09T10:00:00Z'

================================
Formatted Timestamps
================================
curl --get "http://localhost:8086/query" \
  --user "OneDotXUsername":"yourPasswordOrToken" \
  --data-urlencode "db=_internal" \
  --data-urlencode "epoch=ms" \
  --data-urlencode "q=SELECT * FROM runtime WHERE time >= '2021-11-12T08:00:00Z' and time < '2021-11-12T09:30:00Z'"
  
================================
With Nanoseconds
================================
curl --get "http://localhost:8086/query" \
  --user "OneDotXUsername":"yourPasswordOrToken" \
  --data-urlencode "db=_internal" \
  --data-urlencode "epoch=ms" \
  --data-urlencode "q=SELECT * FROM runtime WHERE time >= 1636705510000000000 and time < 1636707010000000000"

================================
With Nanoseconds, group by time
================================
curl --get "http://localhost:8086/query" \
  --user "OneDotXUsername":"yourPasswordOrToken" \
  --data-urlencode "db=_internal" \
  --data-urlencode "epoch=ms" \
  --data-urlencode "q=SELECT mean(*) FROM runtime WHERE time >= 1636705510000000000 and time < 1636707010000000000 group by time(5m)"
  


####################################################################
# Influx 1.8 Widget Sample Multi Query
####################################################################
SELECT mean(Alloc) as Alloc
FROM runtime 
WHERE time >= [earliest] and time < [latest] group by time([interval]);
SELECT mean(Frees) as Frees
FROM runtime 
WHERE time >= [earliest] and time < [latest] group by time([interval]);

####################################################################
# Influx 1.8 Get Database List
####################################################################
curl --get "http://localhost:8086/query" \
  --data-urlencode "q=SHOW DATABASES"

================================
Response sample
================================
{
	"results": [
		{
			"statement_id": 0,
			"series": [
				{
					"name": "databases",
					"columns": [
						"name"
					],
					"values": [
						[
							"_internal"
						]
					]
				}
			]
		}
	]
}


####################################################################
# Influx 2.0 Request with Body Flux Query
####################################################################
curl --request POST \
  http://localhost:8086/api/v2/query?org=initOrg  \
  --header 'Authorization: Token tNuEOGVpF0HcopzXiyAOJybaiYWHIeGDFxg4WVn3JHipR5ergoHivigGqVcLVoU8ODSqchpW0jbobLe8y7JyoQ==' \
  --header 'Accept: application/csv' \
  --header 'Content-type: application/vnd.flux' \
  --data 'from(bucket: "initBucket")
	  |> range(start: -15m, stop: -0m)
	  |> filter(fn: (r) => r["_measurement"] == "http_api_request_duration_seconds")
	  |> filter(fn: (r) => r["method"] == "GET")
	  |> aggregateWindow(every: 15m, fn: mean, createEmpty: false)
	  |> yield(name: "mean")'
	    
================================
Response sample
================================
result,table,_start,_stop,_time,_value,_field,_measurement,handler,method,path,response_code,status,user_agent
,mean,0,2021-04-13T07:19:45.4608732Z,2021-04-13T07:34:45.4608732Z,2021-04-13T07:30:00Z,254.5,+Inf,http_api_request_duration_seconds,platform,GET,/metrics,200,2XX,Go-http-client
,mean,0,2021-04-13T07:19:45.4608732Z,2021-04-13T07:34:45.4608732Z,2021-04-13T07:34:45.4608732Z,299.5,+Inf,http_api_request_duration_seconds,platform,GET,/metrics,200,2XX,Go-http-client
,mean,1,2021-04-13T07:19:45.4608732Z,2021-04-13T07:34:45.4608732Z,2021-04-13T07:30:00Z,254.5,0.005,http_api_request_duration_seconds,platform,GET,/metrics,200,2XX,Go-http-client
,mean,1,2021-04-13T07:19:45.4608732Z,2021-04-13T07:34:45.4608732Z,2021-04-13T07:34:45.4608732Z,299.5,0.005,http_api_request_duration_seconds,platform,GET,/metrics,200,2XX,Go-http-client
,mean,2,2021-04-13T07:19:45.4608732Z,2021-04-13T07:34:45.4608732Z,2021-04-13T07:30:00Z,254.5,0.01,http_api_request_duration_seconds,platform,GET,/metrics,200,2XX,Go-http-client
,mean,2,2021-04-13T07:19:45.4608732Z,2021-04-13T07:34:45.4608732Z,2021-04-13T07:34:45.4608732Z,299.5,0.01,http_api_request_duration_seconds,platform,GET,/metrics,200,2XX,Go-http-client
,mean,3,2021-04-13T07:19:45.4608732Z,2021-04-13T07:34:45.4608732Z,2021-04-13T07:30:00Z,254.5,0.025,http_api_request_duration_seconds,platform,GET,/metrics,200,2XX,Go-http-client


####################################################################
# Request with Body JSON InfluxQL
####################################################################	  
curl --request POST \
  http://localhost:8086/api/v2/query?org=initOrg  \
  --header 'Authorization: Token tNuEOGVpF0HcopzXiyAOJybaiYWHIeGDFxg4WVn3JHipR5ergoHivigGqVcLVoU8ODSqchpW0jbobLe8y7JyoQ==' \
  --header 'Accept: application/csv' \
  --header 'Content-type: application/json' \
  --data '{"type": "flux", "query": "from(bucket: \"initBucket\") |> range(start: -15m, stop: -0m) |> filter(fn: (r) => r[\"_measurement\"] == \"http_api_request_duration_seconds\") |> filter(fn: (r) => r[\"method\"] == \"GET\") |> aggregateWindow(every: 15m, fn: mean, createEmpty: false) |> yield(name: \"mean\")"}'

================================
Response sample
================================
result,table,_start,_stop,_time,_value,_field,_measurement,handler,method,path,response_code,status,user_agent
,mean,0,2021-04-13T07:19:45.4608732Z,2021-04-13T07:34:45.4608732Z,2021-04-13T07:30:00Z,254.5,+Inf,http_api_request_duration_seconds,platform,GET,/metrics,200,2XX,Go-http-client
,mean,0,2021-04-13T07:19:45.4608732Z,2021-04-13T07:34:45.4608732Z,2021-04-13T07:34:45.4608732Z,299.5,+Inf,http_api_request_duration_seconds,platform,GET,/metrics,200,2XX,Go-http-client
,mean,1,2021-04-13T07:19:45.4608732Z,2021-04-13T07:34:45.4608732Z,2021-04-13T07:30:00Z,254.5,0.005,http_api_request_duration_seconds,platform,GET,/metrics,200,2XX,Go-http-client
,mean,1,2021-04-13T07:19:45.4608732Z,2021-04-13T07:34:45.4608732Z,2021-04-13T07:34:45.4608732Z,299.5,0.005,http_api_request_duration_seconds,platform,GET,/metrics,200,2XX,Go-http-client
,mean,2,2021-04-13T07:19:45.4608732Z,2021-04-13T07:34:45.4608732Z,2021-04-13T07:30:00Z,254.5,0.01,http_api_request_duration_seconds,platform,GET,/metrics,200,2XX,Go-http-client
,mean,2,2021-04-13T07:19:45.4608732Z,2021-04-13T07:34:45.4608732Z,2021-04-13T07:34:45.4608732Z,299.5,0.01,http_api_request_duration_seconds,platform,GET,/metrics,200,2XX,Go-http-client
,mean,3,2021-04-13T07:19:45.4608732Z,2021-04-13T07:34:45.4608732Z,2021-04-13T07:30:00Z,254.5,0.025,http_api_request_duration_seconds,platform,GET,/metrics,200,2XX,Go-http-client
  
####################################################################
# Request 
####################################################################
curl --request POST \
  http://localhost:8086/api/v2/query?org=initOrg  \
  --header 'Authorization: Token tNuEOGVpF0HcopzXiyAOJybaiYWHIeGDFxg4WVn3JHipR5ergoHivigGqVcLVoU8ODSqchpW0jbobLe8y7JyoQ==' \
  --header 'Accept: application/csv' \
  --header 'Content-type: application/vnd.flux' \
  --data 'from(bucket: "initBucket")
	  |> range(start: -2m, stop: 0m)
	  |> filter(fn: (r) => r["_measurement"] == "http_api_request_duration_seconds")
	  |> top(n:10, columns: ["_time"])
	  |> filter(fn: (r) => r["method"] == "GET")
	  |> aggregateWindow(every: 15m, fn: mean, createEmpty: false)
	  |> yield(name: "mean")'
